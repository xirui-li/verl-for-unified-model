; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @rotary_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !11
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !12
  %18 = shl i32 %16, 3, !dbg !13
  %.not = icmp slt i32 %18, %5, !dbg !14
  br i1 %.not, label %19, label %common.ret, !dbg !14

common.ret:                                       ; preds = %14, %19
  ret void, !dbg !15

19:                                               ; preds = %14
  %20 = mul i32 %17, %8, !dbg !16
  %21 = sext i32 %20 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = mul i32 %17, %11, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = shl i32 %15, 1, !dbg !20
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !21
  %28 = lshr i32 %27, 4, !dbg !21
  %.lobit = and i32 %28, 1, !dbg !21
  %29 = or disjoint i32 %26, %.lobit, !dbg !22
  %30 = and i32 %28, 7, !dbg !23
  %.lobit46 = lshr i32 %27, 5, !dbg !23
  %31 = and i32 %.lobit46, 3, !dbg !23
  %32 = or disjoint i32 %18, %30, !dbg !24
  %33 = or disjoint i32 %18, %31, !dbg !24
  %34 = or disjoint i32 %33, 4, !dbg !24
  %35 = add i32 %32, %4, !dbg !25
  %36 = mul i32 %35, 40, !dbg !26
  %37 = shl i32 %27, 2, !dbg !27
  %38 = and i32 %37, 60, !dbg !27
  %39 = add i32 %36, %38, !dbg !28
  %40 = sext i32 %39 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !30
  %43 = icmp slt i32 %35, %7, !dbg !31
  %44 = icmp samesign ult i32 %38, 40, !dbg !32
  %45 = and i1 %44, %43, !dbg !33
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %45, i32 1065353216, i1 %45, i32 1065353216, i1 %45, i32 1065353216, i1 %45, i32 1065353216, i1 %45) #2, !dbg !34
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !34
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !34
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !34
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !34
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #2, !dbg !35
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !35
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !35
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !35
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !35
  %56 = mul i32 %29, %13, !dbg !36
  %57 = mul i32 %33, %12, !dbg !37
  %58 = mul i32 %34, %12, !dbg !37
  %59 = add i32 %56, %38, !dbg !38
  %60 = add i32 %59, %57, !dbg !39
  %61 = add i32 %59, %58, !dbg !39
  %62 = sext i32 %60 to i64, !dbg !40
  %63 = getelementptr float, ptr addrspace(1) %25, i64 %62, !dbg !40
  %64 = sext i32 %61 to i64, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %25, i64 %64, !dbg !40
  %66 = mul i32 %29, %10, !dbg !41
  %67 = mul i32 %33, %9, !dbg !42
  %68 = mul i32 %34, %9, !dbg !42
  %69 = add i32 %66, %38, !dbg !43
  %70 = add i32 %69, %67, !dbg !44
  %71 = add i32 %69, %68, !dbg !44
  %72 = sext i32 %70 to i64, !dbg !45
  %73 = getelementptr float, ptr addrspace(1) %22, i64 %72, !dbg !45
  %74 = sext i32 %71 to i64, !dbg !45
  %75 = getelementptr float, ptr addrspace(1) %22, i64 %74, !dbg !45
  %76 = icmp slt i32 %29, %6, !dbg !46
  %77 = icmp slt i32 %33, %5, !dbg !47
  %78 = icmp slt i32 %34, %5, !dbg !47
  %79 = and i1 %76, %77, !dbg !48
  %80 = and i1 %76, %78, !dbg !48
  %81 = and i1 %44, %79, !dbg !49
  %82 = and i1 %44, %80, !dbg !49
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #2, !dbg !50
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !50
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !50
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !50
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !50
  %88 = bitcast i32 %84 to float, !dbg !50
  %89 = bitcast i32 %85 to float, !dbg !50
  %90 = bitcast i32 %86 to float, !dbg !50
  %91 = bitcast i32 %87 to float, !dbg !50
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #2, !dbg !50
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !50
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !50
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !50
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !50
  %97 = bitcast i32 %93 to float, !dbg !50
  %98 = bitcast i32 %94 to float, !dbg !50
  %99 = bitcast i32 %95 to float, !dbg !50
  %100 = bitcast i32 %96 to float, !dbg !50
  %101 = getelementptr i8, ptr addrspace(1) %63, i64 160, !dbg !51
  %102 = getelementptr i8, ptr addrspace(1) %65, i64 160, !dbg !51
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #2, !dbg !52
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !52
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !52
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !52
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !52
  %108 = bitcast i32 %104 to float, !dbg !52
  %109 = bitcast i32 %105 to float, !dbg !52
  %110 = bitcast i32 %106 to float, !dbg !52
  %111 = bitcast i32 %107 to float, !dbg !52
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #2, !dbg !52
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !52
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !52
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !52
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !52
  %117 = bitcast i32 %113 to float, !dbg !52
  %118 = bitcast i32 %114 to float, !dbg !52
  %119 = bitcast i32 %115 to float, !dbg !52
  %120 = bitcast i32 %116 to float, !dbg !52
  %121 = and i32 %37, 508, !dbg !53
  %122 = shl i32 %27, 1, !dbg !53
  %123 = and i32 %122, 192, !dbg !53
  %124 = or disjoint i32 %123, %38, !dbg !53
  %125 = lshr i32 %37, 4, !dbg !53
  %126 = and i32 %125, 28, !dbg !53
  %127 = add nuw nsw i32 %126, %121, !dbg !53
  %128 = zext nneg i32 %127 to i64, !dbg !53
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %128, !dbg !53
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %129, i32 %47, i32 %48, i32 %49, i32 %50, i1 true) #2, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %130 = lshr exact i32 %123, 4, !dbg !53
  %131 = add nuw nsw i32 %130, %124, !dbg !53
  %132 = zext nneg i32 %131 to i64, !dbg !53
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !53
  %134 = load float, ptr addrspace(3) %133, align 16, !dbg !53
  %135 = getelementptr inbounds i8, ptr addrspace(3) %133, i64 4, !dbg !53
  %136 = load float, ptr addrspace(3) %135, align 4, !dbg !53
  %137 = getelementptr inbounds i8, ptr addrspace(3) %133, i64 8, !dbg !53
  %138 = load float, ptr addrspace(3) %137, align 8, !dbg !53
  %139 = getelementptr inbounds i8, ptr addrspace(3) %133, i64 12, !dbg !53
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !53
  %141 = or disjoint i32 %124, 256, !dbg !53
  %142 = lshr i32 %141, 4, !dbg !53
  %143 = and i32 %142, 28, !dbg !53
  %144 = add nuw nsw i32 %143, %141, !dbg !53
  %145 = zext nneg i32 %144 to i64, !dbg !53
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !53
  %147 = load float, ptr addrspace(3) %146, align 16, !dbg !53
  %148 = getelementptr inbounds i8, ptr addrspace(3) %146, i64 4, !dbg !53
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !53
  %150 = getelementptr inbounds i8, ptr addrspace(3) %146, i64 8, !dbg !53
  %151 = load float, ptr addrspace(3) %150, align 8, !dbg !53
  %152 = getelementptr inbounds i8, ptr addrspace(3) %146, i64 12, !dbg !53
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !53
  %154 = fmul float %134, %88, !dbg !53
  %155 = fmul float %136, %89, !dbg !53
  %156 = fmul float %138, %90, !dbg !53
  %157 = fmul float %140, %91, !dbg !53
  %158 = fmul float %147, %97, !dbg !53
  %159 = fmul float %149, %98, !dbg !53
  %160 = fmul float %151, %99, !dbg !53
  %161 = fmul float %153, %100, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %129, i32 %52, i32 %53, i32 %54, i32 %55, i1 true) #2, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %162 = load float, ptr addrspace(3) %133, align 16, !dbg !54
  %163 = load float, ptr addrspace(3) %135, align 4, !dbg !54
  %164 = load float, ptr addrspace(3) %137, align 8, !dbg !54
  %165 = load float, ptr addrspace(3) %139, align 4, !dbg !54
  %166 = load float, ptr addrspace(3) %146, align 16, !dbg !54
  %167 = load float, ptr addrspace(3) %148, align 4, !dbg !54
  %168 = load float, ptr addrspace(3) %150, align 8, !dbg !54
  %169 = load float, ptr addrspace(3) %152, align 4, !dbg !54
  %170 = fmul float %162, %108, !dbg !54
  %171 = fmul float %163, %109, !dbg !54
  %172 = fmul float %164, %110, !dbg !54
  %173 = fmul float %165, %111, !dbg !54
  %174 = fmul float %166, %117, !dbg !54
  %175 = fmul float %167, %118, !dbg !54
  %176 = fmul float %168, %119, !dbg !54
  %177 = fmul float %169, %120, !dbg !54
  %178 = fsub float %154, %170, !dbg !55
  %179 = fsub float %155, %171, !dbg !55
  %180 = fsub float %156, %172, !dbg !55
  %181 = fsub float %157, %173, !dbg !55
  %182 = fsub float %158, %174, !dbg !55
  %183 = fsub float %159, %175, !dbg !55
  %184 = fsub float %160, %176, !dbg !55
  %185 = fsub float %161, %177, !dbg !55
  %186 = fmul float %162, %88, !dbg !56
  %187 = fmul float %163, %89, !dbg !56
  %188 = fmul float %164, %90, !dbg !56
  %189 = fmul float %165, %91, !dbg !56
  %190 = fmul float %166, %97, !dbg !56
  %191 = fmul float %167, %98, !dbg !56
  %192 = fmul float %168, %99, !dbg !56
  %193 = fmul float %169, %100, !dbg !56
  %194 = fmul float %134, %108, !dbg !57
  %195 = fmul float %136, %109, !dbg !57
  %196 = fmul float %138, %110, !dbg !57
  %197 = fmul float %140, %111, !dbg !57
  %198 = fmul float %147, %117, !dbg !57
  %199 = fmul float %149, %118, !dbg !57
  %200 = fmul float %151, %119, !dbg !57
  %201 = fmul float %153, %120, !dbg !57
  %202 = fadd float %194, %186, !dbg !58
  %203 = fadd float %195, %187, !dbg !58
  %204 = fadd float %196, %188, !dbg !58
  %205 = fadd float %197, %189, !dbg !58
  %206 = fadd float %198, %190, !dbg !58
  %207 = fadd float %199, %191, !dbg !58
  %208 = fadd float %200, %192, !dbg !58
  %209 = fadd float %201, %193, !dbg !58
  %210 = bitcast float %178 to i32, !dbg !59
  %211 = bitcast float %179 to i32, !dbg !59
  %212 = bitcast float %180 to i32, !dbg !59
  %213 = bitcast float %181 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %211, i32 %212, i32 %213, ptr addrspace(1) %73, i1 %81) #2, !dbg !59
  %214 = bitcast float %182 to i32, !dbg !59
  %215 = bitcast float %183 to i32, !dbg !59
  %216 = bitcast float %184 to i32, !dbg !59
  %217 = bitcast float %185 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %214, i32 %215, i32 %216, i32 %217, ptr addrspace(1) %75, i1 %82) #2, !dbg !59
  %218 = getelementptr i8, ptr addrspace(1) %73, i64 160, !dbg !60
  %219 = getelementptr i8, ptr addrspace(1) %75, i64 160, !dbg !60
  %220 = bitcast float %202 to i32, !dbg !61
  %221 = bitcast float %203 to i32, !dbg !61
  %222 = bitcast float %204 to i32, !dbg !61
  %223 = bitcast float %205 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %220, i32 %221, i32 %222, i32 %223, ptr addrspace(1) %218, i1 %81) #2, !dbg !61
  %224 = bitcast float %206 to i32, !dbg !61
  %225 = bitcast float %207 to i32, !dbg !61
  %226 = bitcast float %208 to i32, !dbg !61
  %227 = bitcast float %209 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %224, i32 %225, i32 %226, i32 %227, ptr addrspace(1) %219, i1 %82) #2, !dbg !61
  br label %common.ret, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "rotary.py", directory: "/workspace/miniconda3/envs/verl-unified/lib/python3.10/site-packages/flash_attn/ops/triton")
!4 = !{ptr @rotary_kernel, !"kernel", i32 1}
!5 = !{ptr @rotary_kernel, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "rotary_kernel", linkageName: "rotary_kernel", scope: !3, file: !3, line: 13, type: !8, scopeLine: 13, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 46, column: 29, scope: !7)
!11 = !DILocation(line: 47, column: 26, scope: !7)
!12 = !DILocation(line: 48, column: 30, scope: !7)
!13 = !DILocation(line: 59, column: 15, scope: !7)
!14 = !DILocation(line: 59, column: 26, scope: !7)
!15 = !DILocation(line: 0, scope: !7)
!16 = !DILocation(line: 52, column: 32, scope: !7)
!17 = !DILocation(line: 52, column: 20, scope: !7)
!18 = !DILocation(line: 51, column: 28, scope: !7)
!19 = !DILocation(line: 51, column: 16, scope: !7)
!20 = !DILocation(line: 62, column: 20, scope: !7)
!21 = !DILocation(line: 62, column: 43, scope: !7)
!22 = !DILocation(line: 62, column: 30, scope: !7)
!23 = !DILocation(line: 63, column: 40, scope: !7)
!24 = !DILocation(line: 63, column: 27, scope: !7)
!25 = !DILocation(line: 65, column: 21, scope: !7)
!26 = !DILocation(line: 70, column: 34, scope: !7)
!27 = !DILocation(line: 70, column: 60, scope: !7)
!28 = !DILocation(line: 70, column: 52, scope: !7)
!29 = !DILocation(line: 70, column: 17, scope: !7)
!30 = !DILocation(line: 71, column: 17, scope: !7)
!31 = !DILocation(line: 72, column: 32, scope: !7)
!32 = !DILocation(line: 72, column: 65, scope: !7)
!33 = !DILocation(line: 72, column: 46, scope: !7)
!34 = !DILocation(line: 73, column: 18, scope: !7)
!35 = !DILocation(line: 74, column: 18, scope: !7)
!36 = !DILocation(line: 80, column: 37, scope: !7)
!37 = !DILocation(line: 80, column: 75, scope: !7)
!38 = !DILocation(line: 80, column: 55, scope: !7)
!39 = !DILocation(line: 80, column: 93, scope: !7)
!40 = !DILocation(line: 80, column: 17, scope: !7)
!41 = !DILocation(line: 81, column: 41, scope: !7)
!42 = !DILocation(line: 81, column: 81, scope: !7)
!43 = !DILocation(line: 81, column: 61, scope: !7)
!44 = !DILocation(line: 81, column: 101, scope: !7)
!45 = !DILocation(line: 81, column: 21, scope: !7)
!46 = !DILocation(line: 82, column: 36, scope: !7)
!47 = !DILocation(line: 82, column: 67, scope: !7)
!48 = !DILocation(line: 82, column: 47, scope: !7)
!49 = !DILocation(line: 82, column: 78, scope: !7)
!50 = !DILocation(line: 83, column: 21, scope: !7)
!51 = !DILocation(line: 84, column: 25, scope: !7)
!52 = !DILocation(line: 84, column: 21, scope: !7)
!53 = !DILocation(line: 85, column: 18, scope: !7)
!54 = !DILocation(line: 85, column: 29, scope: !7)
!55 = !DILocation(line: 85, column: 24, scope: !7)
!56 = !DILocation(line: 86, column: 18, scope: !7)
!57 = !DILocation(line: 86, column: 29, scope: !7)
!58 = !DILocation(line: 86, column: 24, scope: !7)
!59 = !DILocation(line: 87, column: 22, scope: !7)
!60 = !DILocation(line: 88, column: 23, scope: !7)
!61 = !DILocation(line: 88, column: 61, scope: !7)
!62 = !DILocation(line: 78, column: 4, scope: !7)
